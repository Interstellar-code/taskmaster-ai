# Task ID: 93
# Title: Backend API Enhancement for PRD Upload
# Status: pending
# Dependencies: None
# Priority: high
# PRD Source: prd_006_kanban_prd_upload_feature.md
# PRD Path: C:/laragon/www/taskmaster-ai/.taskmaster/prd/prd_006_kanban_prd_upload_feature.md
# Parsed Date: 2025-06-06T17:29:40.779Z
# File Hash: f50102d225784d3ea83a49676ceb0452ec9ccbdcd4b27b1dfa632b1fb370050d
# File Size: 9423 bytes
# Description: Implement the backend API endpoint for PRD file upload, including Multer middleware for handling multipart/form-data, file validation (MD/TXT, max 10MB), and integration with the existing PRD management system to store files in `.taskmaster/prd/` and register them using `createPrdFromFile()`.
# Details:
1. **Add Dependencies**: Navigate to `kanban-app/` and run `npm install multer`.
2. **Create Upload Endpoint**: In `kanban-app/src/api/routes.js`, add a new `POST /api/v1/prds/upload` endpoint.
3. **File Upload Middleware**: Configure Multer to handle `prdFile` (single file upload).
   - Set destination for temporary storage or directly to `.taskmaster/prd/`.
   - Implement file filter to accept only `MD` and `TXT` file types.
   - Set file size limit to `10MB`.
4. **PRD Registration**: After successful file upload, use the `createPrdFromFile()` function from `scripts/modules/prd-manager/` to register the PRD. This function should handle auto-generating PRD ID, title, and updating `prds.json`.
5. **Error Handling**: Implement robust error handling for invalid file types, oversized files, and issues during PRD registration. Return appropriate HTTP status codes and error messages.

# Test Strategy:
1. **Unit Tests**: Test the Multer configuration with valid and invalid file types/sizes.
2. **API Tests**: Use tools like Postman or curl to send POST requests to `/api/v1/prds/upload` with:
   - Valid MD/TXT files (within size limits).
   - Invalid file types (e.g., PDF, JPG).
   - Files exceeding 10MB.
   - Empty file uploads.
3. **Integration Tests**: Verify that uploaded files are correctly stored in `.taskmaster/prd/` and that `prds.json` is updated with the new PRD's metadata. Check for auto-generated PRD ID and title.

# Subtasks:
## 1. Install Multer Dependency [pending]
### Dependencies: None
### Description: Add Multer to the project dependencies to enable multipart/form-data handling for file uploads.
### Details:
Navigate to the `kanban-app/` directory in the terminal and execute `npm install multer`. Verify `multer` is listed in `package.json`.

## 2. Define PRD Upload Endpoint Structure [pending]
### Dependencies: 93.1
### Description: Create the basic route structure for the new POST /api/v1/prds/upload endpoint in `kanban-app/src/api/routes.js`.
### Details:
In `kanban-app/src/api/routes.js`, add a new `router.post('/v1/prds/upload', ...)` entry. Initially, it can just return a placeholder response.

## 3. Configure Multer Storage and Filename [pending]
### Dependencies: 93.2
### Description: Set up Multer's disk storage engine to specify the destination directory for uploaded files and define how filenames will be generated.
### Details:
In `kanban-app/src/api/routes.js` (or a dedicated Multer config file), configure `multer.diskStorage` to save files to `.taskmaster/prd/`. Ensure filenames are unique, perhaps using a timestamp or UUID.

## 4. Implement Multer File Filter (Type Validation) [pending]
### Dependencies: 93.3
### Description: Add a file filter to Multer to restrict uploads to only Markdown (.md) and Text (.txt) file types.
### Details:
Within Multer's configuration, use the `fileFilter` option. Check `file.mimetype` or `file.originalname` to ensure only 'text/markdown' and 'text/plain' (or '.md' and '.txt' extensions) are allowed. Reject others with an appropriate error.

## 5. Implement Multer File Size Limit [pending]
### Dependencies: 93.4
### Description: Configure Multer to enforce a maximum file size limit of 10MB for uploaded PRD files.
### Details:
Use the `limits` option in Multer's configuration, specifically `fileSize`, setting it to `10 * 1024 * 1024` bytes.

## 6. Integrate Multer Middleware into Endpoint [pending]
### Dependencies: 93.5
### Description: Apply the configured Multer middleware to the `/api/v1/prds/upload` endpoint to handle the incoming file.
### Details:
In `kanban-app/src/api/routes.js`, use `multer().single('prdFile')` as middleware for the upload endpoint, ensuring the field name `prdFile` matches the expected input.

## 7. Call `createPrdFromFile()` for PRD Registration [pending]
### Dependencies: 93.6
### Description: After a successful file upload, invoke the `createPrdFromFile()` function to register the new PRD in the system.
### Details:
Import `createPrdFromFile` from `scripts/modules/prd-manager/`. In the route handler, after Multer has processed the file, call `createPrdFromFile(req.file.path)` passing the path to the uploaded file. Handle its success or failure.

## 8. Implement Error Handling for Multer Specific Errors [pending]
### Dependencies: 93.7
### Description: Add specific error handling for Multer-related issues like invalid file type or file size exceeding limits.
### Details:
Use a custom error handling middleware or a `try-catch` block around the Multer middleware. Check for `MulterError` instances and return appropriate HTTP status codes (e.g., 400 Bad Request) and user-friendly error messages.

## 9. Implement Error Handling for `createPrdFromFile()` [pending]
### Dependencies: 93.8
### Description: Add robust error handling for potential issues during the `createPrdFromFile()` execution.
### Details:
Wrap the `createPrdFromFile()` call in a `try-catch` block. If `createPrdFromFile()` throws an error (e.g., file parsing issues, `prds.json` write errors), return an appropriate HTTP status code (e.g., 500 Internal Server Error) and a descriptive error message.

## 10. Refine API Response and Clean Up [pending]
### Dependencies: 93.9
### Description: Finalize the API response for success and ensure temporary files are handled if necessary.
### Details:
On successful PRD registration, return a 201 Created status code with a success message and potentially the new PRD's ID. Ensure that if Multer saves to a temporary location, the file is moved or deleted after `createPrdFromFile()` is done. If Multer saves directly to `.taskmaster/prd/`, no explicit cleanup is needed unless `createPrdFromFile` fails.

