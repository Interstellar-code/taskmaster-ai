# Task ID: 25
# Title: Implement PRD Change Detection and Flagging
# Status: done
# Dependencies: 21
# Priority: medium
# PRD Source: prd-source-tracking.txt
# PRD Path: prd/done/prd-source-tracking.txt
# Parsed Date: 2025-06-01T11:48:22.922Z
# File Hash: 25d75529982bef86f127ff8043151dc66570dc143f77ab709d800cc42a2314f4
# File Size: 15940 bytes
# Description: Develop functionality to detect modifications in source PRD files and flag associated tasks as outdated. This is a critical step for change management and ensuring task relevance.
# Details:
Create a mechanism (e.g., a new command `task-master check-prd-updates` or an automated background process) that compares the current `fileHash` and `fileSize` of the PRD file on disk with the stored `prdSource.fileHash` and `prdSource.fileSize` for each task. If a discrepancy is found, flag the associated tasks (e.g., by adding a new 'outdated' status or a specific flag in the task object). Consider using file system watchers for real-time detection if feasible, otherwise, a periodic check.

# Test Strategy:
Unit tests for the change detection logic, simulating file modifications and verifying that tasks are correctly flagged. End-to-end tests to confirm that running `check-prd-updates` accurately identifies and flags tasks linked to modified PRD files.

# Subtasks:
## 1. Choose PRD File Monitoring Mechanism [done]
### Dependencies: None
### Description: Evaluate and select the most suitable mechanism for detecting PRD file modifications (e.g., OS-level file watchers, polling with checksums, background process). Consider real-time vs. periodic checks.
### Details:
Research `inotify` (Linux), `FSEvents` (macOS), `ReadDirectoryChangesW` (Windows) for real-time, or define a polling interval for periodic checks. Document pros and cons of each.

## 2. Implement File Hash Calculation [done]
### Dependencies: None
### Description: Develop a utility function to calculate a cryptographic hash (e.g., SHA256) of a given PRD file's content.
### Details:
The function should take a file path as input and return a string representing the file's hash. Handle potential file I/O errors.

## 3. Implement File Size Retrieval [done]
### Dependencies: None
### Description: Develop a utility function to retrieve the size of a given PRD file.
### Details:
The function should take a file path as input and return an integer representing the file size in bytes. Handle potential file I/O errors.

## 4. Define PRD Change Detection Logic [done]
### Dependencies: 25.2, 25.3
### Description: Implement the core logic for detecting PRD file modifications based on `fileHash` and `fileSize` comparison.
### Details:
The logic should first compare `fileSize`. If different, a change is detected. If `fileSize` is the same, then compare `fileHash`. If `fileHash` is different, a change is detected. If both are the same, no change.

## 5. Integrate Monitoring Mechanism with Detection Logic [done]
### Dependencies: 25.1, 25.4
### Description: Connect the chosen PRD file monitoring mechanism (from subtask 1) with the change detection logic (from subtask 4).
### Details:
If using real-time watchers, the callback should trigger the detection logic. If using polling, a scheduled job should periodically run the detection logic for all monitored PRD files.

## 6. Define Task Outdating Mechanism [done]
### Dependencies: 25.5
### Description: Design how tasks associated with a modified PRD file will be flagged as 'outdated' or 'requiring review'.
### Details:
Specify the data model changes required to store the 'outdated' status for tasks. Consider how this status will be propagated or displayed in the UI.

## 7. Develop Unit Tests for Change Detection [done]
### Dependencies: 25.2, 25.3, 25.4
### Description: Write comprehensive unit tests for the file hash calculation, file size retrieval, and the core change detection logic.
### Details:
Test cases should include: identical files, files with different content but same size, files with different size, empty files, and error handling (e.g., file not found).

## 8. Develop End-to-End Tests for Accurate Flagging [done]
### Dependencies: 25.5, 25.6
### Description: Create end-to-end tests to verify that PRD file modifications correctly lead to associated tasks being flagged as outdated.
### Details:
Simulate PRD file changes (e.g., programmatically modify a test PRD file) and assert that the corresponding tasks in the system are correctly marked as outdated.

