# Task ID: 94
# Title: PRD Upload Modal Component Development
# Status: pending
# Dependencies: 93
# Priority: high
# PRD Source: prd_006_kanban_prd_upload_feature.md
# PRD Path: C:/laragon/www/taskmaster-ai/.taskmaster/prd/prd_006_kanban_prd_upload_feature.md
# Parsed Date: 2025-06-06T17:29:40.779Z
# File Hash: f50102d225784d3ea83a49676ceb0452ec9ccbdcd4b27b1dfa632b1fb370050d
# File Size: 9423 bytes
# Description: Develop the `PRDUploadModal` React component using `shadcn/ui Dialog` for the file upload interface. This includes implementing a reusable `FormFileUpload` component with drag-and-drop functionality, client-side validation, and visual feedback for upload progress.
# Details:
1. **Create `PRDUploadModal.tsx`**: In `kanban-app/src/components/forms/`, create `PRDUploadModal.tsx`. This component should utilize the `shadcn/ui Dialog` component.
2. **Create `FormFileUpload.tsx`**: In the same directory, create `FormFileUpload.tsx`. This reusable component will handle:
   - Drag-and-drop functionality for files.
   - A file picker fallback.
   - Client-side validation for file types (MD/TXT) and size (max 10MB).
   - Visual feedback for different states: default, hover, drag-over, error, success.
   - Displaying selected file name and size.
3. **Integrate `FormFileUpload` into `PRDUploadModal`**: The modal should contain the `FormFileUpload` component.
4. **Upload Progress and Status**: Implement UI elements within the modal to show upload progress (e.g., a progress bar) and status (loading, success, error messages).
5. **Modal Actions**: Include 'Cancel' and 'Upload' buttons. The 'Upload' button should trigger the API call to the backend endpoint developed in Task 93.

# Test Strategy:
1. **Component Tests**: Test `PRDUploadModal` and `FormFileUpload` in isolation.
   - Verify modal opens and closes correctly.
   - Test drag-and-drop functionality with valid and invalid files.
   - Test file picker functionality.
   - Verify client-side validation messages for incorrect file types and sizes.
   - Check visual feedback for different states (hover, drag-over, error, success).
   - Simulate API responses (success/failure) to observe UI updates (progress, status messages).

# Subtasks:
## 1. Setup PRDUploadModal Component Structure [pending]
### Dependencies: None
### Description: Create the basic structure for the `PRDUploadModal` component using `shadcn/ui Dialog` in `kanban-app/src/components/forms/PRDUploadModal.tsx`. This subtask focuses on setting up the modal's shell without file upload logic.
### Details:
Initialize `PRDUploadModal.tsx` with a `Dialog` component from `shadcn/ui`. Include `DialogTrigger`, `DialogContent`, `DialogHeader`, `DialogTitle`, and `DialogDescription`. Add placeholder content for now. Ensure it can be opened and closed.

## 2. Develop FormFileUpload Basic Structure and File Input [pending]
### Dependencies: None
### Description: Create the `FormFileUpload` component in `kanban-app/src/components/forms/FormFileUpload.tsx`. Implement the basic file input mechanism, including a hidden input and a visible area for drag-and-drop or click-to-select.
### Details:
Create `FormFileUpload.tsx`. Use a hidden `<input type='file'>` element. Design a visible area (e.g., a `div`) that triggers the hidden input's click event. Implement basic `onChange` to capture selected files and display their names (e.g., 'No file selected' or 'fileName.ext').

## 3. Implement Drag-and-Drop Functionality for FormFileUpload [pending]
### Dependencies: 94.2
### Description: Add drag-and-drop capabilities to the `FormFileUpload` component, allowing users to drag files into the designated area to select them.
### Details:
Implement `onDragOver`, `onDragLeave`, and `onDrop` event handlers for the `FormFileUpload` component's visible area. Prevent default browser behavior for drag events. On `onDrop`, capture the files from the event's `dataTransfer` object and update the component's state to reflect the selected file.

## 4. Implement Client-Side File Validation in FormFileUpload [pending]
### Dependencies: 94.3
### Description: Add client-side validation to `FormFileUpload` for file types (MD/TXT) and size (max 10MB). Provide visual feedback for validation errors.
### Details:
Before updating the state with a selected file, perform checks for `file.type` (or `file.name` for extension check) and `file.size`. If validation fails, display an error message (e.g., 'Invalid file type' or 'File too large') within the component. Clear the error message on successful selection.

## 5. Add Visual Feedback for FormFileUpload States [pending]
### Dependencies: 94.4
### Description: Enhance `FormFileUpload` with visual feedback for different states: default, hover, drag-over, error, and success.
### Details:
Apply distinct CSS classes or inline styles based on component state (e.g., `isDragging`, `hasError`, `hasFile`). For `drag-over`, change border style or background. For `error`, use red borders/text. For `success` (file selected), show a checkmark or green border. Display selected file name and size.

## 6. Integrate FormFileUpload into PRDUploadModal [pending]
### Dependencies: 94.1, 94.5
### Description: Embed the developed `FormFileUpload` component within the `PRDUploadModal` and ensure data flow for selected files.
### Details:
Import `FormFileUpload` into `PRDUploadModal.tsx`. Render it inside the `DialogContent`. Pass a callback prop to `FormFileUpload` to receive the selected file object in `PRDUploadModal`'s state. Display the selected file's name within the modal.

## 7. Implement Upload Progress and Status UI in PRDUploadModal [pending]
### Dependencies: 94.6
### Description: Add UI elements to `PRDUploadModal` to display upload progress (e.g., a progress bar) and status messages (loading, success, error).
### Details:
Utilize `shadcn/ui Progress` component or a custom progress bar. Implement state variables in `PRDUploadModal` for `uploadProgress` (0-100), `uploadStatus` ('idle', 'uploading', 'success', 'error'), and `statusMessage`. Display these elements conditionally based on `uploadStatus`.

## 8. Add Cancel and Upload Buttons to PRDUploadModal [pending]
### Dependencies: 94.7
### Description: Include 'Cancel' and 'Upload' buttons in the `PRDUploadModal` footer. Implement the 'Cancel' button's functionality.
### Details:
Add `shadcn/ui Button` components for 'Cancel' and 'Upload' within `DialogFooter`. The 'Cancel' button should close the modal and reset its internal state. The 'Upload' button should be disabled if no file is selected or if an upload is in progress.

## 9. Integrate API Call for File Upload in PRDUploadModal [pending]
### Dependencies: 94.8
### Description: Connect the 'Upload' button to trigger the API call to the backend endpoint (from Task 93) for file submission. Handle loading, success, and error states.
### Details:
On 'Upload' button click, initiate an asynchronous function to send the selected file to the backend (e.g., using `fetch` or `axios`). Update `uploadStatus` to 'uploading' and potentially `uploadProgress`. On success, set `uploadStatus` to 'success' and display a success message. On error, set `uploadStatus` to 'error' and display an error message. Ensure the modal closes on successful upload.

## 10. Refinement and Accessibility Review [pending]
### Dependencies: 94.9
### Description: Perform a final review of both `PRDUploadModal` and `FormFileUpload` for UI/UX consistency, responsiveness, and accessibility.
### Details:
Check styling across different screen sizes. Ensure proper focus management for keyboard navigation within the modal. Add ARIA attributes where necessary for screen readers. Review error messages and visual feedback for clarity. Optimize performance if needed.

