# Task ID: 34
# Title: Terminal Kanban Board Layout and Display
# Status: done
# Dependencies: None
# Priority: high
# PRD Source: kanban-view-prd.txt
# PRD Path: C:/laragon/www/taskmaster-ai/scripts/kanban-view-prd.txt
# Parsed Date: 2025-06-01T07:27:35.658Z
# File Hash: 12f0f1db4cda4f5ad8a71c57a66d919f3e4b97458b4505e3b1b700180108c880
# File Size: 18300 bytes
# Description: Implement the foundational terminal-based Kanban board layout using ASCII art and box drawing characters. This includes setting up the chosen terminal UI framework (Blessed.js or Ink.js) and rendering the three status columns: 'pending', 'in-progress', and 'done'. Each column should display a task count in its header and a 'No tasks' placeholder if empty. The board must dynamically adapt to terminal width and height.
# Details:
Utilize Blessed.js or Ink.js for terminal UI rendering. Create a layout that divides the terminal into three main columns. Use ASCII art and box drawing characters to visually separate these columns. Implement logic to dynamically adjust column widths and heights based on the terminal's dimensions. For each column, display a header with the column name (e.g., 'ðŸ“‹ IN PROGRESS') and the current task count. If a column has no tasks, display 'No tasks'. Ensure consistent styling with existing TaskMaster UI, including emojis and colors. Integrate with existing TaskMaster utilities for initial JSON reading to populate the board with tasks.

# Test Strategy:
Verify that the terminal board displays three distinct columns with correct headers and task counts. Test dynamic resizing by changing terminal window dimensions. Confirm 'No tasks' message appears in empty columns. Visually inspect for consistent ASCII art and styling across different terminal environments (Windows PowerShell, macOS Terminal, Linux terminals).

# Subtasks:
## 1. Initialize Terminal UI Framework [done]
### Dependencies: None
### Description: Set up the chosen terminal UI framework (Blessed.js or Ink.js) to create a basic interactive terminal application.
### Details:
This involves installing the framework, setting up the main application instance, and creating a basic screen or app component.

## 2. Design and Render Kanban Columns [done]
### Dependencies: 34.1
### Description: Create and render the three main Kanban columns ('pending', 'in-progress', 'done') using ASCII art or the chosen UI framework's drawing capabilities.
### Details:
Each column should have a distinct visual boundary. Consider using borders or background colors to differentiate them.

## 3. Implement Dynamic Column Resizing [done]
### Dependencies: 34.2
### Description: Develop logic to dynamically resize the Kanban columns based on the current terminal dimensions, ensuring they always fit the screen.
### Details:
This will involve listening for terminal resize events and recalculating column widths to distribute space evenly or proportionally.

## 4. Display Column Headers and Task Counts [done]
### Dependencies: 34.3
### Description: Add headers to each Kanban column, displaying the column name and a dynamic count of tasks within that column. Include a 'No tasks' placeholder when a column is empty.
### Details:
The task count should be updated as tasks are added or moved. The 'No tasks' message should appear centrally within an empty column.

## 5. Integrate Initial JSON Data Loading [done]
### Dependencies: 34.4
### Description: Implement functionality to load initial task data from a JSON file and populate the respective Kanban columns on application startup.
### Details:
This involves parsing the JSON data and mapping tasks to their corresponding 'pending', 'in-progress', or 'done' columns, updating task counts accordingly.

