# Task ID: 90
# Title: Implement Task Deletion System
# Status: done
# Dependencies: 87, 86, 84
# Priority: medium
# PRD Source: None (manually created)
# Description: Develop a robust task deletion system, including a confirmation dialog, cascade deletion for subtasks, and dependency cleanup, with a basic undo functionality.
# Details:
Implement the TaskDeleteDialog using shadcn/ui Dialog. This dialog should include a confirmation step before deletion and a warning for cascade operations. Integrate the frontend with the DELETE /api/v1/tasks/{id} endpoint. On the backend, implement the logic for cascade deletion of subtasks and cleanup of dependencies when a task is removed. Consider a time-limited recovery/undo functionality for accidental deletions, potentially by soft-deleting tasks and having a background process for permanent deletion.

# Test Strategy:
1. **Unit Tests:** Write unit tests for the backend cascade deletion logic and dependency cleanup. 2. **Integration Tests:** Test the integration between the frontend dialog and the backend API endpoint. 3. **UI Tests:** Verify the display and functionality of the confirmation dialog and cascade warning. 4. **Scenario Testing:** a. Delete a task with no subtasks or dependencies. b. Delete a task with subtasks, verifying cascade deletion. c. Delete a task with dependencies, verifying dependency cleanup. d. Test the undo functionality within the specified time limit. e. Attempt to delete a task without confirmation to ensure the dialog prevents it. 5. **Performance Testing:** Assess the performance of cascade deletions for tasks with a large number of subtasks/dependencies.
