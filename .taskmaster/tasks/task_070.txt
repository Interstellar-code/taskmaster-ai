# Task ID: 70
# Title: Create Task Status Update API Endpoints
# Status: done
# Dependencies: 63
# Priority: high
# PRD Source: prd_kanban_webapp.md
# PRD Path: C:/laragon/www/taskmaster-ai/.taskmaster/prd/pending/prd_kanban_webapp.md
# Parsed Date: 2025-06-02T21:47:10.025Z
# File Hash: 26a344cab6840ec0768ff67b41b044bc39c81d2533587fe97cf3d1143a61f936
# File Size: 21070 bytes
# Description: Create API endpoints for updating the status of a specific task.
# Details:
Implement a PATCH endpoint at `/api/v1/tasks/:id/status`. This endpoint should accept a JSON payload containing the new `status` for the task. Use the TaskMaster core integration to update the task's status in `tasks.json`. Return the updated task or a success message. Implement validation for the task ID and status value.

# Test Strategy:
Use Postman or `curl` to send PATCH requests to update task statuses. Verify that the `tasks.json` file is updated correctly and that the API returns the expected response. Test with invalid task IDs and statuses to ensure proper error handling.

# Subtasks:
## 1. Command Interface and Parameter Handling [done]
### Dependencies: None
### Description: Design and implement the command interface for the 'diagram' command, including parsing and validating input parameters.
### Details:
Ensure the command interface can accept parameters such as task IDs, output format, and optional filters. Validate inputs for correctness and completeness.

## 2. Task Data Extraction and Transformation to Mermaid Syntax [done]
### Dependencies: 70.1
### Description: Extract task data from the database and transform it into Mermaid syntax for diagram generation.
### Details:
Retrieve necessary task details, including dependencies and status, and convert them into a format compatible with Mermaid.js for diagram creation.

## 3. Diagram Rendering with Status Color Coding [done]
### Dependencies: 70.2
### Description: Implement the rendering of diagrams with color coding based on task status.
### Details:
Use Mermaid.js to render diagrams, applying different colors to tasks based on their status (e.g., pending, in-progress, completed).

