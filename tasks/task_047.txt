# Task ID: 47
# Title: Implement PRD Version Control and History
# Status: done
# Dependencies: 43
# Priority: medium
# PRD Source: prd-tracking-meta.txt
# PRD Path: C:/laragon/www/taskmaster-ai/scripts/prd-tracking-meta.txt
# Parsed Date: 2025-06-01T09:56:53.019Z
# File Hash: 53ecce97f9bc04112843bd533d798ab370c391bbf3172c364369f601aac6d055
# File Size: 8619 bytes
# Description: Implement version control for PRDs, allowing snapshots, tracking modifications, and providing rollback capabilities.
# Details:
Create a system to maintain PRD version snapshots in `/prd/archived/versions/`. This should involve creating a new snapshot whenever a PRD file is modified or its status changes. Each snapshot should include a timestamp and a description of the change. Implement a rollback capability to restore a previous version of a PRD file and update its metadata accordingly.

# Test Strategy:
Modify a PRD file and change its status multiple times. Verify that new versions are created in the `archived/versions` directory with correct timestamps. Attempt to rollback to a previous version and confirm that the PRD file content and its metadata in `prds.json` are correctly restored.

# Subtasks:
## 1. Design Snapshot Trigger Logic [done]
### Dependencies: None
### Description: Define the events or conditions that will trigger the creation of a new PRD version snapshot. This includes manual triggers, automated triggers (e.g., on commit, on specific time intervals, on significant content changes), and the logic for determining when a change is 'significant' enough to warrant a new version.
### Details:
Consider triggers like 'on save', 'on publish', 'on major content update', 'daily backup'. Define thresholds for 'major content update' (e.g., percentage of content changed, specific sections modified).

## 2. Implement Snapshot Timestamping and Description Capture [done]
### Dependencies: 47.1
### Description: Develop the mechanism to automatically capture a timestamp for each snapshot and prompt/allow users to add a descriptive message for the version. This metadata is crucial for understanding the history.
### Details:
Timestamp format (ISO 8601 recommended). User input field for version description. Consider auto-generating a description if none is provided (e.g., 'Auto-save on YYYY-MM-DD HH:MM').

## 3. Define Storage Strategy for `archived/versions` [done]
### Dependencies: 47.1, 47.2
### Description: Determine the file structure and naming conventions within the `archived/versions` directory for storing PRD snapshots. This includes how individual versions are organized (e.g., by timestamp, by version number, by project).
### Details:
Consider a hierarchical structure: `archived/versions/{project_id}/{prd_id}/{timestamp}/`. Decide on file formats for storing PRD content (e.g., Markdown, JSON, HTML).

## 4. Develop Snapshot Creation Mechanism [done]
### Dependencies: 47.1, 47.2, 47.3
### Description: Implement the core logic to take the current state of a PRD, apply the timestamp and description, and save it to the designated `archived/versions` location according to the defined storage strategy.
### Details:
This involves reading the current PRD content, creating a new directory/file for the version, and writing the content along with metadata (timestamp, description). Ensure atomic operations to prevent data corruption.

## 5. Implement Version History Listing [done]
### Dependencies: 47.3, 47.4
### Description: Create a function or interface that can list all available versions for a given PRD, displaying their timestamps and descriptions to the user.
### Details:
Read directory contents of `archived/versions/{project_id}/{prd_id}/` and parse metadata files/directories to present a chronological list of versions.

## 6. Design Rollback Mechanism - Content Restoration [done]
### Dependencies: 47.3, 47.5
### Description: Define the process for restoring the content of a PRD to a specific historical version. This involves retrieving the old content from `archived/versions` and replacing the current PRD content.
### Details:
Identify the target version's content. Overwrite the current PRD file with the content from the selected historical version. Consider backup of current version before rollback.

## 7. Design Rollback Mechanism - Metadata and State Restoration [done]
### Dependencies: 47.6
### Description: Beyond just content, define how associated metadata (e.g., status, assigned owner, tags) and any other relevant state are restored or updated during a rollback.
### Details:
Determine which metadata fields are versioned and how they are stored with each snapshot. Implement logic to update the active PRD's metadata to match the rolled-back version's metadata.

## 8. Implement Rollback Execution and Confirmation [done]
### Dependencies: 47.6, 47.7
### Description: Develop the user interface and backend logic for executing a rollback, including confirmation prompts and error handling. Ensure the process is robust and reversible if necessary.
### Details:
User confirmation dialog before rollback. Logging of rollback operations. Mechanism to potentially 'undo' a rollback (e.g., by creating a new snapshot of the state just before rollback).

