# Task ID: 26
# Title: Develop PRD Re-parsing and Update Logic
# Status: done
# Dependencies: 25
# Priority: medium
# PRD Source: prd-source-tracking.txt
# PRD Path: prd/done/prd-source-tracking.txt
# Parsed Date: 2025-06-01T11:48:22.922Z
# File Hash: 25d75529982bef86f127ff8043151dc66570dc143f77ab709d800cc42a2314f4
# File Size: 15940 bytes
# Description: Enable the system to re-parse updated PRD files, allowing for incremental updates to existing tasks or creation of new tasks based on the changes. This includes maintaining a history of PRD associations.
# Details:
Implement the `task-master reparse-prd --file=<path> --update-existing` command. This command should re-read the specified PRD file. If `--update-existing` is used, it should attempt to identify and update existing tasks that originated from this PRD. This might involve comparing task titles or descriptions to detect changes. New tasks identified in the updated PRD should be created. Maintain a `prd-history.json` to track parsing sessions and changes over time.

# Test Strategy:
Unit tests for the re-parsing logic, ensuring that existing tasks are updated correctly and new tasks are created as expected. Integration tests to verify that re-parsing a modified PRD correctly updates the task data and that the `prd-history.json` accurately reflects the parsing sessions.

# Subtasks:
## 1. Define `reparse-prd` command structure and arguments [done]
### Dependencies: None
### Description: Outline the command-line interface for `reparse-prd`, including the main command and the `--update-existing` flag. Specify argument parsing and basic validation.
### Details:
Define `argparse` structure. Specify `--update-existing` as a boolean flag. Consider other potential flags like `--dry-run` for future expansion.

## 2. Implement PRD file reading and parsing [done]
### Dependencies: None
### Description: Develop the core logic to read and parse PRD files (e.g., Markdown, YAML) into an in-memory data structure representing tasks, features, etc.
### Details:
Choose a parsing library (e.g., `markdown-it`, `PyYAML`). Define the internal data model for parsed PRD content. Handle potential parsing errors.

## 3. Design `prd-history.json` structure [done]
### Dependencies: None
### Description: Define the schema and content for `prd-history.json` to store historical versions of PRD data, including timestamps and version identifiers.
### Details:
Consider storing full PRD content, diffs, or metadata. Include fields for timestamp, PRD file hash/checksum, and potentially a version number.

## 4. Implement logic for identifying existing tasks [done]
### Dependencies: 26.2
### Description: Develop algorithms to compare newly parsed tasks with existing tasks (from the current state or `prd-history.json`) to identify matches based on criteria like title, description, or unique identifiers.
### Details:
Define matching heuristics (e.g., exact title match, fuzzy title match, content hash). Prioritize unique IDs if available. Handle cases where multiple matches are found.

## 5. Implement task update logic (`--update-existing` enabled) [done]
### Dependencies: 26.4
### Description: Develop the logic to update existing tasks in the system based on changes detected in the re-parsed PRD, specifically when `--update-existing` is true.
### Details:
Determine which fields can be updated (e.g., description, status, assignee). Implement conflict resolution strategies if external changes occurred. Ensure atomicity of updates.

## 6. Implement new task creation logic [done]
### Dependencies: 26.4
### Description: Develop the logic to create new tasks in the system for items found in the re-parsed PRD that do not have a corresponding existing task.
### Details:
Define default values for new tasks. Integrate with the task management system's API for creation. Handle potential errors during creation.

## 7. Implement `prd-history.json` management [done]
### Dependencies: 26.3
### Description: Develop the logic to read from and write to `prd-history.json`, including versioning, archiving previous states, and ensuring data integrity.
### Details:
Implement read/write functions. Consider strategies for limiting history size (e.g., keeping N versions, or versions for X days). Use atomic writes to prevent corruption.

## 8. Develop unit tests for re-parsing and task identification logic [done]
### Dependencies: 26.2, 26.4, 26.5, 26.6
### Description: Create comprehensive unit tests for the PRD parsing, task identification (matching), and update/creation decision-making components.
### Details:
Test various PRD formats, edge cases (empty files, malformed content). Test different scenarios for task matching (exact, partial, no match). Test update/create decisions based on `--update-existing` flag.

## 9. Develop integration tests for task data updates and history tracking [done]
### Dependencies: 26.1, 26.7, 26.8
### Description: Create end-to-end integration tests to verify that `reparse-prd` correctly updates/creates tasks in the system and accurately manages `prd-history.json`.
### Details:
Simulate PRD changes over time. Verify task updates in a mock task management system. Verify `prd-history.json` content after multiple re-parsing runs. Test `--update-existing` flag behavior end-to-end.

