# Task ID: 51
# Title: Implement ASCII PRD Card Design and Metadata Display
# Status: done
# Dependencies: 50
# Priority: high
# PRD Source: prd-kanban-view.txt
# PRD Path: C:/laragon/www/taskmaster-ai/prd/pending/prd-kanban-view.txt
# Parsed Date: 2025-06-01T12:39:51.399Z
# File Hash: 6ad2b16f54193c55e6c60c0a8d4db261a353e5e6e2bd1e5788c179070612201a
# File Size: 22432 bytes
# Description: Design and implement the ASCII PRD cards to display essential metadata: ID, title, priority, complexity, linked task count, and completion percentage. Cards should use box drawing characters for separation and truncate long titles with '...'.
# Details:
Create a component or function to render individual PRD cards. Each card must display the specified metadata. Priority should be indicated with colored text and symbols (游댮 High, 游리 Medium, 游릭 Low). Complexity with visual indicators (游릭 Low, 游리 Medium, 游댮 High). Linked task count as 'Tasks: X/Y' and completion percentage as 'Progress: Z%'. Implement text truncation for long titles and ensure proper text wrapping within column constraints. Integrate with existing PRD utilities to fetch metadata from `prd/prds.json`.

# Test Strategy:
Verify that PRD cards are rendered correctly within their respective columns. Check for accurate display of all metadata fields, including colored priority/complexity indicators, task counts, and completion percentages. Test title truncation and ensure full title is available when selected (to be implemented in a later task).

# Subtasks:
## 1. Design ASCII PRD Card Structure [done]
### Dependencies: None
### Description: Define the ASCII character layout and structure for a single PRD card, including placeholders for all metadata fields (ID, title, priority, complexity, linked task count, completion percentage). Determine fixed widths for each section.
### Details:
This involves sketching out the card's visual representation using ASCII characters, considering borders, separators, and alignment. Decide on the maximum width for the card and allocate space for each data point. For example:
+-----------------------------------+
| ID: [ID] | P: [P] | C: [C] |
|-----------------------------------|
| [Title]                           |
|                                   |
|-----------------------------------|
| Tasks: [Count] | Comp: [Percent] |
+-----------------------------------+

## 2. Implement Reusable PRD Card Component [done]
### Dependencies: 51.1
### Description: Develop a function or class that takes PRD metadata as input and returns a multi-line string representing the ASCII PRD card. This component should handle the rendering of all specified metadata fields.
### Details:
The component should accept parameters like `id`, `title`, `priority`, `complexity`, `linkedTaskCount`, and `completionPercentage`. It will use the structure defined in subtask 1 to format and place these values. Implement basic string formatting and padding to align text within the card structure.

## 3. Integrate Text Formatting and Styling [done]
### Dependencies: 51.2
### Description: Enhance the PRD card component to include title truncation with ellipsis, text wrapping for long titles, and conditional coloring for priority and complexity based on predefined rules.
### Details:
For title truncation, if the title exceeds a certain character limit, it should be cut off and '...' appended. For text wrapping, if the title is too long for a single line, it should wrap to the next line within the allocated title area. Implement logic to apply ANSI escape codes for colors (e.g., red for high priority, green for low complexity) to the priority and complexity fields.

## 4. Connect with Existing PRD Data Utilities [done]
### Dependencies: 51.3
### Description: Modify the PRD card component to accept data directly from the existing PRD data utilities or a mock data source that mimics their output format. Ensure all required metadata fields are correctly mapped and displayed.
### Details:
Identify the data structure provided by the PRD data utilities (or create a mock object with similar structure). Map the fields from this data structure to the parameters expected by the PRD card component. Test with various data inputs to ensure robustness and correct display of all metadata.

