# Task ID: 24
# Title: Implement PRD Source Query and Filter Commands
# Status: done
# Dependencies: 21
# Priority: medium
# PRD Source: None (manually created)
# Description: Implement new commands to query and filter tasks based on their PRD source. This includes listing all PRDs, showing tasks from a specific PRD, and displaying the PRD source for a given task ID.
# Details:
Add new commands to the command registry (e.g., `task-master list-prds`, `task-master tasks-from-prd --file=<path>`, `task-master show-prd-source --id=<id>`). `list-prds` should iterate through all tasks and unique `prdSource.filePath` values. `tasks-from-prd` should filter tasks based on the provided PRD file path. `show-prd-source` should retrieve and display the `prdSource` object for a specific task ID. Implement efficient data retrieval for these queries.

# Test Strategy:
Unit tests for each new command to verify correct filtering and data retrieval logic. Integration tests to ensure commands interact correctly with the task data store and return accurate results based on the PRD source information.

# Subtasks:
## 1. Define `list-prds` command [done]
### Dependencies: None
### Description: Specify the command name, arguments (e.g., filters like status, owner), and expected output format for listing product requirements documents (PRDs).
### Details:
This command should allow users to view a summary of all PRDs, potentially filtered by their current status (e.g., 'draft', 'approved', 'in-progress') or assigned owner. The output should be concise, showing key identifiers and a brief description.

## 2. Define `tasks-from-prd` command [done]
### Dependencies: 24.1
### Description: Specify the command name, arguments (e.g., PRD ID), and expected output format for extracting tasks associated with a specific PRD.
### Details:
This command will take a PRD identifier as input and display all tasks that are linked to that PRD. The output should include task ID, description, and current status. Consider options for filtering tasks (e.g., by status).

## 3. Define `show-prd-source` command [done]
### Dependencies: 24.1
### Description: Specify the command name, arguments (e.g., PRD ID), and expected output format for displaying the raw source content of a PRD.
### Details:
This command will retrieve and display the complete, raw content of a specified PRD. This is useful for debugging or reviewing the full document as it exists in the data store.

## 4. Implement data retrieval and filtering logic [done]
### Dependencies: 24.1, 24.2, 24.3
### Description: Develop the backend logic for efficiently retrieving PRD and task data, including filtering capabilities based on command arguments.
### Details:
Focus on optimizing queries for performance, especially when dealing with large datasets. Implement indexing strategies if applicable. Ensure robust error handling for invalid inputs or missing data.

## 5. Implement command handlers [done]
### Dependencies: 24.4
### Description: Develop the command handlers that parse arguments, call the data retrieval logic, and format the output for each new command.
### Details:
Each command handler (`list-prds`, `tasks-from-prd`, `show-prd-source`) will be responsible for interpreting user input, invoking the appropriate data access methods, and presenting the results in a user-friendly format.

## 6. Develop unit tests for command logic [done]
### Dependencies: 24.5
### Description: Write unit tests to verify the correctness of argument parsing, filtering logic, and output formatting for each command.
### Details:
These tests should isolate the command logic from the actual data store, using mock data where necessary. Cover various scenarios, including valid inputs, invalid inputs, and edge cases.

## 7. Develop integration tests for data store interaction [done]
### Dependencies: 24.5, 24.6
### Description: Write integration tests to ensure the commands correctly interact with the data store and produce accurate results.
### Details:
These tests will involve a real or simulated data store to verify that data retrieval, filtering, and display work as expected end-to-end. Test data should be set up to cover different scenarios (e.g., PRDs with no tasks, PRDs with many tasks, filtered results).

