# Task ID: 22
# Title: Integrate PRD Metadata Capture into Parse Command
# Status: done
# Dependencies: 21
# Priority: high
# PRD Source: None (manually created)
# Description: Modify the `parse-prd` command to capture and store PRD metadata (file path, name, parsed date, hash, size) into the new 'prdSource' field of generated tasks. This is crucial for establishing the traceability link.
# Details:
Update the `parse-prd` command in `scripts/modules/commands.js` to extract the file path, file name, current timestamp for `parsedDate`, calculate `fileHash` (e.g., SHA256), and `fileSize` during PRD parsing. This information should then be populated into the `prdSource` field of each task generated from that PRD. Handle both relative and absolute file paths consistently. Consider using a hashing library for `fileHash` calculation.

# Test Strategy:
Unit tests for the `parse-prd` command to ensure all `prdSource` fields are correctly populated for newly generated tasks. End-to-end tests to verify that tasks created via `parse-prd` have accurate PRD source information stored in their respective JSON and text files.

# Subtasks:
## 1. Analyze existing `parse-prd` command and identify modification points [done]
### Dependencies: None
### Description: Review `scripts/modules/commands.js` to understand the current `parse-prd` command's logic, data extraction methods, and where `prdSource` fields can be integrated. Identify the specific areas requiring modification for new data extraction.
### Details:
Examine the `parse-prd` function, its input parameters, and how it currently processes PRD files. Pinpoint the exact location where `prdSource` data should be extracted and populated within the command's output structure.

## 2. Implement `prdSource` field extraction and population [done]
### Dependencies: 22.1
### Description: Modify the `parse-prd` command to extract all necessary `prdSource` fields from the PRD files. Populate these fields into the appropriate data structure generated by the command.
### Details:
Define the structure for `prdSource` fields (e.g., `sourcePath`, `fileHash`, `lastModified`). Implement logic to read these values from the PRD file's metadata or content and assign them to the `prdSource` object.

## 3. Develop `fileHash` calculation logic [done]
### Dependencies: 22.2
### Description: Implement a robust method within the `parse-prd` command to calculate the `fileHash` for each PRD file. This should ensure uniqueness and integrity of the file identification.
### Details:
Choose an appropriate hashing algorithm (e.g., SHA256). Implement the file reading and hashing process, ensuring efficient handling of file I/O and accurate hash generation. Integrate this calculation into the `prdSource` population.

## 4. Handle file paths for `prdSource` [done]
### Dependencies: 22.2
### Description: Ensure correct and consistent handling of file paths for `prdSource` fields, including absolute vs. relative paths, and cross-platform compatibility.
### Details:
Determine whether to store absolute or relative paths for `sourcePath`. Implement logic to normalize paths and ensure they are correctly resolved regardless of the operating system or execution environment.

## 5. Write unit tests for `prdSource` field population [done]
### Dependencies: 22.4
### Description: Create comprehensive unit tests to verify that all `prdSource` fields are correctly extracted and populated by the `parse-prd` command.
### Details:
Develop test cases that cover various PRD file structures, including cases with missing or malformed `prdSource` data. Assert that `sourcePath`, `fileHash`, and other `prdSource` fields are populated accurately.

## 6. Write unit tests for `fileHash` calculation [done]
### Dependencies: 22.3
### Description: Develop specific unit tests to validate the accuracy and consistency of the `fileHash` calculation logic.
### Details:
Create test files with known content and pre-calculated hashes. Verify that the implemented `fileHash` function produces the expected hash values for these files. Test edge cases like empty files or very large files.

## 7. Develop end-to-end tests for accurate storage in task files [done]
### Dependencies: 22.5, 22.6
### Description: Implement end-to-end tests to ensure that the `prdSource` information, including `fileHash` and paths, is accurately stored in the generated task files after running the `parse-prd` command.
### Details:
Set up a test environment, run the `parse-prd` command on sample PRD files, and then inspect the generated task files to confirm that the `prdSource` object and its fields are correctly persisted.

